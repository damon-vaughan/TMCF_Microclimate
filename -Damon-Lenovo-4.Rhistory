# Read true raw data and change column names
d <- lapply(filenames, read_MC_noZC) %>%
bind_rows() %>%
change_column_names(source = "NoZC") %>%
arrange(Timestamp)
View(d)
# get rid of any ghost sensors
if(length(which(str_detect(names(d), "Unknown"))) > 0){
d2 <- d %>%
select(-names(d)[which(str_detect(names(d), "Unknown"))])
} else {
d2 <- d
}
d3 <- d2 %>%
mutate(Tree = str_split(MC.ID, "_")[[1]][1],
MC = str_split(MC.ID, "_")[[1]][2]) %>%
select(Tree, MC, Timestamp, everything())
View(d3)
no.ZC.vec <- no.ZC.vec.full
# i <- no.ZC.vec[8]
for(i in no.ZC.vec){
filenames <- list.files(file.path("Microclimate_data_raw", "MC_noZC",
i),
pattern = "csv", full.names = T)
MC.ID <- str_split(i, "-")[[1]][1]
# Read true raw data and change column names
d <- lapply(filenames, read_MC_noZC) %>%
bind_rows() %>%
change_column_names(source = "NoZC") %>%
arrange(Timestamp)
# get rid of any ghost sensors
if(length(which(str_detect(names(d), "Unknown"))) > 0){
d2 <- d %>%
select(-names(d)[which(str_detect(names(d), "Unknown"))])
} else {
d2 <- d
}
d3 <- d2 %>%
mutate(Tree = str_split(MC.ID, "_")[[1]][1],
MC = str_split(MC.ID, "_")[[1]][2]) %>%
select(Tree, MC, Timestamp, everything())
write_csv(d3, file.path("Microclimate_data_raw", str_c(MC.ID, ".csv")))
cat("Imported from: ", MC.ID, "\n")
}
ground.vec <- full.ground.vec
# i <- "FBP2"
for(i in ground.vec){
d <- read_csv(file.path("Microclimate_data_raw", str_c(i, "_ATM41.csv"))) %>%
mutate(Station = "S0") %>%
select(-MC) %>%
select(Tree, Station, Timestamp, everything()) %>%
remove_port_from_header()
d2 <- d %>%
select(-Lightning_count, -Lightning_distance, -ATM22_Yaxis,
-ATM22_Xaxis, -ATM41_SensorTemp,
-Drop1, -Drop2, -Drop3, -Drop4)
d3 <- fix_ZC_timestamp_duplication(d2)
write_csv(d3, file.path("Microclimate_data_L2",
str_c(i, "_MC", "_L2.csv")))
cat("saved data for: ", i, "\n")
}
name.change <- read_excel(file.path("Microclimate_data_supporting",
"Variable_names.xlsx"))
source("1_Functions_Microclimate.R")
prejune.L1.dir <- file.path("Microclimate_data_L2", "Microclimate_toJune2023_L1")
all.files <- list.files(prejune.L1.dir,
pattern = ".csv")
tree.vec.prejune <- full.tree.vec[-1]
# i <- "ET2"
for(i in tree.vec.prejune){
pointer <- which(str_detect(all.files, i) == T)
filenames <- str_c(prejune.L1.dir, all.files[pointer], sep = "/")
S1 <- read_csv(filenames[which(str_detect(filenames, "S1") == T)]) %>%
change_column_names_prejune()
S2 <- read_csv(filenames[which(str_detect(filenames, "S2") == T)]) %>%
change_column_names_prejune()
S3 <- read_csv(filenames[which(str_detect(filenames, "S3") == T)]) %>%
change_column_names_prejune()
S4 <- read_csv(filenames[which(str_detect(filenames, "S4") == T)]) %>%
change_column_names_prejune()
if(length(which(str_detect(filenames, "S5") == T)) > 0){
S5 <- read_csv(filenames[which(str_detect(filenames, "S5") == T)]) %>%
change_column_names_prejune()
}
if(length(which(str_detect(filenames, "S5") == T)) > 0){
allStations <- bind_rows(S1, S2, S3, S4, S5)
} else {
allStations <- bind_rows(S1, S2, S3, S4)
}
allStations2 <- allStations %>%
select(Tree, Station, Timestamp, Solar, Temp, RH, Atmos_pressure,
LW_minutes, LW_minutes_H, LWS_Count, Wind_direction, Wind_speed, Gust_speed)
out <- str_c(i, "_L2_prejune.csv")
# write_csv(treeAvg, here("Microclimate_data_LVL2", out))
write_csv(allStations2, file.path("Microclimate_data_L2", "Microclimate_toJune2023_L2_new", out))
print(i)
}
ground.vec <- full.ground.vec
# i <- ground.vec[5]
for(i in ground.vec){
d <- read_csv(file.path("Microclimate_data_L2", "Microclimate_toJune2023_L1",
str_c(i, "_LVL1.csv"))) %>%
mutate(Station = "S0") %>%
select(-BatteryPercent, -mVBatteryVoltage, -kPaReferencePressure, -degreeCLoggerTemperature) %>%
select(Tree = PastureID, Station, Timestamp, everything()) %>%
change_column_names_prejune(location = "Ground")
d2 <- d %>%
select(Tree, Station, Timestamp, Solar, Temp, RH, Atmos_pressure,
LW_minutes, LW_minutes_H, LWS_Count, Wind_direction, Wind_speed, Gust_speed,
Precip_max, Precipitation)
out <- str_c(i, "_L2_prejune.csv")
write_csv(d2, file.path("Microclimate_data_L2", "Microclimate_toJune2023_L2_new", out))
}
library(needs)
needs(tidyverse, lubridate)
source("1_Functions_Microclimate.R")
tree.vec <- full.tree.vec
ground.vec <- full.ground.vec
MC.vec <- c(tree.vec, ground.vec)
# i <- "TV1"
for(i in MC.vec){
old.dat <- read_csv(file.path("Microclimate_data_L2",
"Microclimate_toJune2023_L2_new",
str_c(i, "_L2_prejune.csv")))
old.dat2 <- old.dat %>%
group_by(Station) %>%
nest() %>%
mutate(data = map(data, fix_ZC_timestamp_duplication)) %>%
unnest(data) %>%
ungroup()
filename.in.L2 <- file.path("Microclimate_data_L2",
str_c(i, "_MC", "_L2.csv"))
if(file.exists(filename.in.L2)){
new.dat <- read_csv(file.path("Microclimate_data_L2",
str_c(i, "_MC_L2.csv")))
old.dat4 <- old.dat2 %>%
filter(Timestamp < min(new.dat$Timestamp, na.rm = T))
d <- bind_rows(old.dat4, new.dat)
} else {
d <- old.dat2
cat("no new data for: ", i, "\n")
}
d2 <- d %>%
distinct() %>%
arrange(Tree, Station, Timestamp)
write_csv(d2, file.path("Microclimate_data_L3",
str_c(i, "_MC", "_L3.csv")))
cat("saved data for: ", i, "\n")
}
library(needs)
needs(tidyverse, readxl)
source("1_Functions_Microclimate.R")
options(readr.show_col_types = FALSE)
theme_set(theme_bw())
RH.low.maxes.global <- c("ET2_S4", "ET7_S4", "FB4_S1", "FB4_S4", "TV3_S2")
RH.low.maxes.local <- c("FB8_S5")
bad.data <- read_excel(file.path("Microclimate_data_supporting", "MC_bad_data_windows_Damon.xlsx")) %>%
select(-Note)
bad.data.nst <- bad.data %>%
group_by(Tree, Station, Variable) %>%
nest() %>%
mutate(Data.expanded = map(data, expand_data_window, "15 min")) %>%
select(-data)
bad.data.expanded <- bad.data.nst  %>%
unnest(Data.expanded) %>%
ungroup() %>%
rename(Bad.data = Data.flag)
# i <- "FB8"
tree.vec <- full.tree.vec
ground.vec <- full.ground.vec
MC.vec <- c(tree.vec, ground.vec)
# MC.vec <- "TV1"
i <- "ET1"
MC.vec <- c(tree.vec, ground.vec)
# MC.vec <- "TV1"
# i <- "ET1"
# !!!! SLOW !!!!!
for(i in MC.vec){
d <- read_csv(file.path("Microclimate_data_L3", str_c(i, "_MC", "_L3.csv")))
## Remove bad data ---------------------------------------------------------
BDE <- bad.data.expanded %>%
filter(Tree == i)
d2 <- d %>%
pivot_longer(4:12, names_to = "Variable", values_to = "Value") %>%
left_join(BDE, by = c("Tree", "Station", "Variable", "Timestamp")) %>%
mutate(Value = ifelse(!is.na(Bad.data), NA, Value)) %>%
select(-Bad.data) %>%
distinct() %>%
pivot_wider(names_from = Variable, values_from = Value)
# These thresholds are determined in the lower section of the script
d3 <- d2 %>%
mutate(Temp = ifelse(Temp == 0, NA, Temp),
RH = ifelse(RH == 0, NA, RH),
Atmos_pressure = ifelse(Atmos_pressure == 0, NA, Atmos_pressure),
Atmos_pressure = ifelse(Atmos_pressure > 100, NA, Atmos_pressure))
# RH fixes ------------------------------------------------------------------
# Change all RH > 1 to 1, then nest the df for the adjustment functions
d3.nst <- d3 %>%
mutate(RH = ifelse(RH > 1, 1, RH)) %>%
mutate(Key = str_c(i, "_", Station)) %>%
group_by(Station) %>%
nest() %>%
ungroup()
# str(d3.nst, max.level = 1)
# x <- d3.nst$data[[1]]
# str(x, max.level = 2)
d4 <- d3.nst %>%
mutate(data = map(data, adjust_RH_maxes_global)) %>%
mutate(data = map(data, adjust_RH_maxes_local)) %>%
unnest(data) %>%
ungroup() %>%
select(-Key)
# Calculate variables -----------------------------------------------------
# mutate(Wetness = 1.54 * exp(0.0058 * LWS_Count)) %>%
d5 <- d4 %>%
mutate(VPD = calculate_VPD(Temp, RH)) %>%
mutate(Wetness = round(1.54 * exp(0.0058 * LWS_Count), 2))
# Wetness adjustment ------------------------------------------------------
# mutate(Wetness = 1.54 * exp(0.0058 * LWS_Count))
# d6 <- d5 %>%
#   mutate(Count = log(Wetness/1.54)/0.0058)
#
# d.sum <- d6 %>%
#   group_by(Tree, Station) %>%
#   summarise(minimum = min(Count, na.rm = T))
#
# Save --------------------------------------------------------------------
write_csv(d5, file.path("Microclimate_data_L4",
str_c(i, "_MC", "_L4.csv")))
cat("saved data for: ", i, "\n")
}
library(needs)
needs(tidyverse, shiny, lubridate)
source("app_functions_MC.R")
options(readr.show_col_types = FALSE)
import.log <- read_csv(file.path("Microclimate_data_supporting",
"zl6_import_log.csv"))
max.date <- max(import.log$Last.import, na.rm = T)
zl6 <- read_csv(file.path("Microclimate_data_supporting",
"zl6_database_long.csv"))
instruments <- read_csv(file.path("Microclimate_data_supporting", "Meter_instruments.csv"))
ui <- fluidPage(
titlePanel("Microclimate data portal"),
sidebarLayout(
sidebarPanel(
sliderInput("daterange",
label = h4("Select date range"),
min = ymd("2022-06-01"),
max = as_date(Sys.time()),
value = c(ymd("2022-06-01"), Sys.time())),
fluidRow(radioButtons("fixed.y", inline = T,
label = h4("Fix y-axis?"),
choices = c("No", "Coarse", "Fine"),
selected = "No")),
fluidRow(sliderInput("y.coarse",
label = h4("Select coarse y-axis range"),
min = 0,
max = 1500,
value = c(0, 1500))),
fluidRow(
column(6,
sliderInput("y.fine.min",
label = h4("Select fine y-axis min"),
min = 0,
max = 100,
value = 0,
step = 0.5)),
column(6,
sliderInput("y.fine.range",
label = h4("Select fine y-axis range"),
min = 0,
max = 20,
value = 0,
step = 0.5))),
fluidRow(
column(3,
radioButtons("tree",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4",
"ETP1", "ETP2", "FBP1", "FBP2", "TVP"),
selected = "ET1")),
column(3, offset = 1,
fluidRow(
checkboxGroupInput("station",
label = h4("Select Station"),
choices = c("S0", "S1", "S2", "S3",
"S4", "S5", "CS"),
selected = c("S0", "S1", "S2", "S3",
"S4", "S5", "CS")),
# radioButtons("station",
#              label = h4("Select Station"),
#              choices = c("S0", "S1", "S2", "S3",
#                          "S4", "S5", "CS"),
#              selected = c("S1")),
radioButtons("Variable",
label = h4("Select variable"),
choices = c("Solar", "Temp", "RH", "Atmos_pressure",
"VPD", "LWS_Count", "Wind_direction",
"Wind_speed", "Gust_speed", "Precipitation",
"Precip_max", "EpiMoisture", "EpiTemp",
"ECRN-100_Precipitation",
"ECRN-100_Precip_max"),
selected = "Solar"),
)),
column(3, offset = 1,
fluidRow(
radioButtons("Level",
label = h4("Select level"),
choices = c("L3", "L4"),
selected = "L4")),
fluidRow(
radioButtons("Time.res",
label = h4("Select time resolution"),
choices = c("15 Min", "Hourly", "Daily", "Weekly"),
selected = "15 Min")))),
titlePanel("Download options"),
fluidRow(
column(5,
radioButtons("Time.format",
label = h4("Select time format"),
choices = list("ISO", "Excel_ready"),
selected = "ISO")),
column(5,
radioButtons("All.variables",
label = h4("Download all variables?"),
choices = list("All", "Only_selected"),
selected = "Only_selected"))
),
downloadButton("downloadData", "Download")
),
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Plot",
"Graph shows data until:",
verbatimTextOutput("max.date.out"),
plotOutput("plot",
click = "plot_click",
brush = "plot_brush"),
verbatimTextOutput("plot_clickinfo"),
plotOutput("plot_brushedpoints")),
tabPanel("Wiring", tableOutput("wiring1"), tableOutput("wiring2"),
tableOutput("wiring3"), tableOutput("wiring4")),
tabPanel("Data", tableOutput("data1"), tableOutput("data2")),
tabPanel("Summary", tableOutput("summary"))))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
read_csv(file.path(str_c("Microclimate_data_", input$Level),
str_c(input$tree, "_MC_", input$Level, ".csv"))) %>%
filter(Tree == input$tree) %>%
filter(Timestamp >= as.POSIXct(input$daterange[1], tz = "UTC")  &
Timestamp <= as.POSIXct(input$daterange[2], tz = "UTC"))
})
dataInput2 <- reactive({
dataInput() %>%
filter(Station %in% input$station) %>%
pivot_longer(4:ncol(dataInput()),
names_to = "Variable", values_to = "Measure") %>%
filter(Variable == input$Variable)
})
dataInput3 <- reactive({
if(input$Time.res == "15 Min"){
dataInput2()
} else if(input$Time.res == "Hourly"){
dataInput2() %>%
group_by(Tree, Station, Timestamp = floor_date(Timestamp, "hour"), Variable) %>%
summarise(across(where(is.numeric), ~mean(., na.rm = T))) %>%
ungroup()
} else if(input$Time.res == "Daily"){
dataInput2() %>%
group_by(Tree, Station, Timestamp = floor_date(Timestamp, "day"), Variable) %>%
summarise(across(where(is.numeric), ~mean(., na.rm = T))) %>%
ungroup()
} else if(input$Time.res == "Weekly"){
dataInput2() %>%
group_by(Tree, Station, Timestamp = floor_date(Timestamp, "week"), Variable) %>%
summarise(across(where(is.numeric), ~mean(., na.rm = T))) %>%
ungroup()}
})
## Plots -------------------------------------------------------------------
output$plot <- renderPlot({
p <- ggplot(dataInput3()) +
geom_line(aes(x = Timestamp, y = Measure, color = Station)) +
theme_bw() +
theme(axis.title.x = element_blank()) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$Variable))
if(input$fixed.y == "Coarse"){
p <- p +
ylim(input$y.coarse[1], input$y.coarse[2])
}
if(input$fixed.y == "Fine"){
p <- p +
ylim(input$y.fine.min, input$y.fine.min + input$y.fine.range)
}
p
})
output$plot_clickinfo <- renderPrint({
val <- nearPoints(dataInput3(), input$plot_click, maxpoints = 1)
unique(val$Timestamp)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput3(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Timestamp, y = Measure)) +
theme_bw() +
theme(axis.title.x = element_blank()) +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24))
})
## Data and tables --------------------------------------------------------
output$max.date.out <- renderText({
as.character(max(dataInput3()$Timestamp, na.rm = T))
})
locate.datalogger <- reactive({
inst <- instruments %>%
filter(Variable == input$Variable) %>%
pull(Instrument)
zl6 %>%
filter(Location == input$tree & Station %in% input$station &
Instrument == inst) %>%
select(MC.ID) %>%
distinct()
})
output$wiring1 <- renderTable({
instruments %>%
filter(Variable == input$Variable)
})
output$wiring2 <- renderTable({
locate.datalogger()
})
output$wiring3 <- renderTable({
zl6 %>%
filter(Location == input$tree & MC.ID %in% locate.datalogger()$MC.ID) %>%
select(-ZL.ID, -Location) %>%
mutate(Port = as.numeric(Port))
})
output$wiring4 <- renderTable({
inst <- instruments %>%
filter(Variable == input$Variable) %>%
pull(Instrument)
instruments %>%
filter(Instrument == inst)
})
data.for.summaries <- reactive({
dataInput3() %>%
mutate(Timestamp = as.character(Timestamp))
})
output$data1 <- renderTable({
head(data.for.summaries())
})
output$data2 <- renderTable({
tail(data.for.summaries())
})
output$summary <- renderTable({
summarise_MC(data.for.summaries())
})
## Download options --------------------------------------------------------
data.for.download <- reactive({
if(input$All.variables == "All"){
dataInput()
} else {
dataInput3()
}
})
data.for.download2 <- reactive({
if(input$Time.format == "Excel_ready"){
data.for.download() %>%
mutate(Timestamp = as.character(Timestamp))
} else {
data.for.download()
}
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$tree,
str_sub(as.character(input$daterange[1]), start = 1, end = 10),
str_sub(as.character(input$daterange[2]), start = 1, end = 10),
sep = "_"),
".csv")
},
content <-  function(file) {
write_csv(data.for.download2(), file)
}
)
}
shinyApp(ui, server)
MC.ID <- "FB1_MC1"
filename <- list.files(
file.path("Microclimate_data_raw", "MC_final_download", "MC.ID"),
pattern = "csv", full.names = T)
filename <- list.files(
file.path("Microclimate_data_raw", "MC_final_download", MC.ID),
pattern = "csv", full.names = T)
filename <- list.files(
file.path("Microclimate_data_raw", "MC_final_downloads", MC.ID),
pattern = "csv", full.names = T)
